<?php

/*
	Json Data Binding Library -- An abstract interface to data sources
	Copyright Longflow Enterprises Ltd
	2011

*/

abstract class DataSource
{
	abstract public function SetCredential($c);
	abstract public function GetData($tbl, $query, $Sqlparameters);
	
}
/*
	generated by components such as EasyDataSet
*/
class DataTableUpdator
{
	public $SourceTableName;
	public $TableName;
	public $NameDelimitBegin;
	public $NameDelimitEnd;
	public $Parameters;
	public $ErrorMessage;
	public $query;
	public $cr0;
	public $DEBUG;
	public $owner;
	public $funcName;
	public $FireEventOnFetchData;
	function __construct($Source, $Table, $Name0, $Name1, $c) 
	{
		$this->DEBUG = false;
		$this->SourceTableName = $Source;
		$this->TableName = $Table;
		$this->NameDelimitBegin = $Name0;
		$this->NameDelimitEnd = $Name1;
		$this->ErrorMessage = '';
		$this->cr0 = $c;
		$this->FireEventOnFetchData = false;
	}
	public function SetDebug($debug)
	{
		$this->DEBUG = $debug;
	}
	public function onFetchData($rowNumber,$row)
	{
		call_user_func_array(array($this->owner, $this->funcName), array($rowNumber, $row));
	}
	public function AddParameter($Column, $columnIndex)
	{
		if($this->Parameters == null)
		{
			$this->Parameters = array();
		}
		$p = new SqlClientParameter();
		$p->name = "c". $Column->Name. $columnIndex;
		$p->type = $Column->Type;
		$this->Parameters[$p->name] = $p;
		return $p->name;
	}
	public function SetParameterValue($Column, $columnIndex, $value)
	{
		$this->Parameters["c". $Column->Name. $columnIndex]->value = $value;
	}
	public function AddFilterParameter($Column, $columnIndex)
	{
		if($this->Parameters == null)
		{
			$this->Parameters = array();
		}
		$p = new SqlClientParameter();
		$p->name = "f". $Column->Name. $columnIndex;
		$p->type = $Column->Type;
		$this->Parameters[$p->name] = $p;
		return $p->name;
	}
	public function SetFilterParameterValue($Column, $columnIndex, $value)
	{
		$this->Parameters["f". $Column->Name. $columnIndex]->value = $value;
	}
	public function SetQuery($qry)
	{
		$this->query = $qry;
	}
	public function ExecuteNonQuery()
	{
		$msql = new JsonSourceMySql();
		$msql->SetCredential($this->cr0);
		$msql->SetDebug($this->DEBUG);
		$ps = array();
		$pn = count($this->Parameters);
		if($pn > 0)
		{
			foreach($this->Parameters as $p)
			{
				$p1 = new SqlClientParameter();
				$p1->name = $p->name;
				$p1->type = $this->getMsqlIType($p->type);
				if($p->type == 12)
				{
					if(strlen($p->value) == 0)
					{
						$p1->value = null;
					}
					else
					{
						$p1->value = $p->value;
					}
				}
				else
				{
					$p1->value = $p->value;
				}
				$ps[] = $p1;
			}
		}
		$ret = $msql->ExecuteNonQuery($this->query, $ps);
		if(!$ret)
		{
			$this->ErrorMessage = $msql->errorMessage;
		}
		return $ret;
	}
	public function CreateNewRecord()
	{
		$msql = new JsonSourceMySql();
		$msql->SetCredential($this->cr0);
		$msql->SetDebug($this->DEBUG);
		$ps = array();
		$pn = count($this->Parameters);
		if($pn > 0)
		{
			foreach($this->Parameters as $p)
			{
				$p1 = new SqlClientParameter();
				$p1->name = $p->name;
				$p1->type = $this->getMsqlIType($p->type);
				if($p->type == 12)
				{
					if(strlen($p->value) == 0)
					{
						$p1->value = null;
					}
					else
					{
						$p1->value = $p->value;
					}
				}
				else
				{
					$p1->value = $p->value;
				}
				$ps[] = $p1;
			}
		}
		return $msql->CreateNewRecord($this->query, $ps, true);
	}
	public function getMsqlIType($t)
	{
		if($t == 0)
			return 'd';
		if($t > 0 && $t < 4)
			return 'i';
		if($t == 4 || $t == 5)
			return 'd';
		if($t == 7)
			return 's';
		if($t == 8 || $t == 9)
			return 'i';
		if($t > 9 && $t < 16)
			return 's';
		if($t == 16)
			return 'i';
		if($t == 246)
			return 'd';
		if($t == 247 || $t == 248)
			return 'i';
		if($t == 252)
			return 's';
		if($t > 248 && $t < 253)
			return 'b';
			
		return 's';
	}
/*
$mysqli_type = array();
$mysqli_type[0] = "DECIMAL";
$mysqli_type[1] = "TINYINT";
$mysqli_type[2] = "SMALLINT";
$mysqli_type[3] = "INTEGER";
$mysqli_type[4] = "FLOAT";
$mysqli_type[5] = "DOUBLE";

$mysqli_type[7] = "TIMESTAMP";
$mysqli_type[8] = "BIGINT";
$mysqli_type[9] = "MEDIUMINT";
$mysqli_type[10] = "DATE";
$mysqli_type[11] = "TIME";
$mysqli_type[12] = "DATETIME";
$mysqli_type[13] = "YEAR";
$mysqli_type[14] = "DATE";

$mysqli_type[16] = "BIT";

$mysqli_type[246] = "DECIMAL";
$mysqli_type[247] = "ENUM";
$mysqli_type[248] = "SET";
$mysqli_type[249] = "TINYBLOB";
$mysqli_type[250] = "MEDIUMBLOB";
$mysqli_type[251] = "LONGBLOB";
$mysqli_type[252] = "BLOB";
$mysqli_type[253] = "VARCHAR";
$mysqli_type[254] = "CHAR";
$mysqli_type[255] = "GEOMETRY"; 

*/
}
?>