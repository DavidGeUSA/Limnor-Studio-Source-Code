<?php

/*
	Json Data Binding Library -- MySQLI data source for php 
	Copyright Longflow Enterprises Ltd
	2011

	Provide PHP interface between MySQL and PHP Json Data Binding.
	It fetches MySql data and converts to PHP Json objects conforming to Json Data Binding standard.
	It updates MySql database using data from Json objects conforming to Json Data Binding standard.
*/

/*
       NOT_NULL_FLAG         = 1                                                                              
       PRI_KEY_FLAG          = 2                                                                               
       UNIQUE_KEY_FLAG       = 4
	   MULTIPLE_KEY_FLAG     = 8                                                                            
       BLOB_FLAG             = 16                                                                                 
       UNSIGNED_FLAG         = 32                                                                             
       ZEROFILL_FLAG         = 64                                                                             
       BINARY_FLAG           = 128                                                                              
       ENUM_FLAG             = 256                                                                                
       AUTO_INCREMENT_FLAG   = 512                                                                      
       TIMESTAMP_FLAG        = 1024                                                                          
       SET_FLAG              = 2048                                                                                
       NO_DEFAULT_VALUE_FLAG = 4096
	                         = 8192
       PART_KEY_FLAG         = 16384                                                                          
	   NUM_FLAG              = 32768                                                                               
       GROUP_FLAG            = 32768                                                                             
       UNIQUE_FLAG           = 65536
*/
class Credential
{
	public $host;
	public $user;
	public $password;
	public $database;
}
class JsonSourceMySql extends DataSource
{
	public $host;
	public $user;
	public $password;
	public $database;
	public $DEBUG;
	public $errorMessage;
	public $dataFetcher;
	public $FireEventOnFetchData;
	function __construct()
	{
		$this->DEBUG = false;
		$this->errorMessage = '';
		$this->FireEventOnFetchData = false;
	}
	public function SetCredential($c)
	{
		$this->host = $c->host;
		$this->user = $c->user;
		$this->password = $c->password;
		$this->database = $c->database;
	}
	public function SetDebug($b)
	{
		$this->DEBUG = $b;
	}
	public function QueryData($mysqli, $tbl, $query, $Sqlparameters)
	{
		$stmt = $mysqli->stmt_init();
		if($this->DEBUG)
		{
			echo "MySql: stmt_init finished. <br>";
		}
		if($mysqli->errno)
		{
			$this->errorMessage = "MySql: stmt_init failed:". $mysqli->error;
			if($this->DEBUG)
			{
				echo $this->errorMessage. " <br>";
			}
		}
		if ($stmt->prepare($query)) 
		{
			if($this->DEBUG)
			{
				echo "MySql: prepare query finished. <br>";
			}
			$st = "";
			$pn = count($Sqlparameters);
			if($this->DEBUG)
			{
				echo "MySql: parameter count:". $pn. "<br>";
			}
			if($pn > 0)
			{
				$pvs = array();
				$bindpV[] = &$st;
				for($i=0;$i<$pn;$i++)
				{
					if($this->DEBUG)
					{
						echo "MySql: parameter ". $i. " type:". $Sqlparameters[$i]->type. "  value:". $Sqlparameters[$i]->value. "<br>";
					}
					$st = $st.$Sqlparameters[$i]->type;
					$pvs["p".strval($i)] = $Sqlparameters[$i]->value;
					$bindpV[] = &$pvs["p".strval($i)];
				}
				call_user_func_array(array($stmt,'bind_param'),$bindpV);
			}
			$stmt->execute();
			//
			if($mysqli->errno)
			{
				$this->errorMessage = "MySql: execute failed:". $mysqli->error;
				if($this->DEBUG)
				{
					echo $this->errorMessage. " <br>";
				}
			}
			//
			if($this->DEBUG)
			{
				echo "MySql: execute finished. <br>";
			}
			//
			$meta = $stmt->result_metadata();
			while ($column = $meta->fetch_field()) 
			{
				if($this->DEBUG)
				{
					echo "MySql: field ";
					echo $column->name;
					echo " flags:"; echo $column->flags;
					echo " type:"; echo $column->type;
					echo "<br>";
				}
				$tbl->addColumn($column->name, (($column->flags & 2) != 0) || (($column->flags & 4) != 0), (($column->flags & 512) != 0), ($column->flags & 512) != 0, $column->type);
				$bindVarsArray[] = &$results[$column->name];
			}
			$tbl->createColumnMap();
			call_user_func_array(array($stmt, 'bind_result'), $bindVarsArray);
			//
			$rNum = 0;
			while($stmt->fetch())
			{
				$r = $tbl->addRow();
				foreach($results as $key => $value)
				{
					$cidx = $tbl->columnIndex($key);
					if($tbl->isBlob($cidx))
					{
						if(empty($value)) 
						{
							$r->addColumnValue($cidx, $value);
						}
						else
						{
							$r->addColumnValue($cidx, base64_encode($value));
						}
					}
					else
					{
						$r->addColumnValue($cidx, $value);
					}
				}
				if($this->DEBUG)
				{
					echo "MySql: fetched row ". $rNum. "<br>";
				}
				$rNum++;
			}
			// Free resultset
			$stmt->free_result();
			$stmt->close();
			if($this->FireEventOnFetchData)
			{
				for($ridx = 0; $ridx<count($tbl->Rows); $ridx++)
				{
					$this->dataFetcher->onFetchData($ridx, $tbl->Rows[$ridx]);
				}
			}
		}
		else
		{
			$this->errorMessage = "MySql: prepare query failed. ".$mysqli->error;
			if($this->DEBUG)
			{
				echo $this->errorMessage."<br>";
			}
		}
	}
	public function GetSingleValue($mysqli, $query, $Sqlparameters)
	{
		if($this->DEBUG)
		{
			echo "GetSingleValue: $query <br><br>";
		}
		$v = null;
		$stmt = $mysqli->stmt_init();
		if($this->DEBUG)
		{
			echo "MySql: stmt_init finished. <br>";
		}
		if($mysqli->errno)
		{
			if($this->DEBUG)
			{
				echo "MySql: stmt_init failed:". $mysqli->error. " <br>";
			}
		}
		if ($stmt->prepare($query)) 
		{
			if($this->DEBUG)
			{
				echo "MySql: prepare query finished. <br>";
			}
			$st = "";
			$pn = count($Sqlparameters);
			if($this->DEBUG)
			{
				echo "MySql: parameter count:". $pn. "<br>";
			}
			if($pn > 0)
			{
				$pvs = array();
				$bindpV[] = &$st;
				for($i=0;$i<$pn;$i++)
				{
					if($this->DEBUG)
					{
						echo "MySql: parameter ". $i. " type:". $Sqlparameters[$i]->type. "  value:". $Sqlparameters[$i]->value. "<br>";
					}
					$st = $st.$Sqlparameters[$i]->type;
					$pvs["p".strval($i)] = $Sqlparameters[$i]->value;
					$bindpV[] = &$pvs["p".strval($i)];
				}
				call_user_func_array(array($stmt,'bind_param'),$bindpV);
			}
			$stmt->execute();
			//
			if($mysqli->errno)
			{
				if($this->DEBUG)
				{
					echo "MySql: execute failed:". $mysqli->error. " <br>";
				}
			}
			//
			if($this->DEBUG)
			{
				echo "MySql: execute finished. <br>";
			}
			//
			$meta = $stmt->result_metadata();
			//if($column = $meta->fetch_field())
			//{
			$colC = 0;
			while ($column = $meta->fetch_field())
			{
				$bindVarsArray[] = &$results[$column->name];
				$colC ++;
			}
			if($this->DEBUG)
			{
				echo "column count:". $colC. "<br>";
			}
			call_user_func_array(array($stmt, 'bind_result'), $bindVarsArray);
			//
			if($colC > 0)
			{
				//$stmt->bind_result($column->name, $v);
				if($stmt->fetch())
				{
					if($this->DEBUG)
					{
						echo "MySql: fetched row <br>";
					}
					foreach($results as $key => $value)
					{
						$v = $value;
						if($this->DEBUG)
						{
							echo "MySql: fetched value: $v<br>";
						}
						break;
					}
				}
				else
				{
					if($this->DEBUG)
					{
						echo "MySql: fetch row failed. ".$mysqli->error."<br>";
					}
				}
			}
			else
			{
				if($this->DEBUG)
				{
					echo "MySql: fetch meta failed. ".$mysqli->error."<br>";
				}
			}
			// Free resultset
			$stmt->free_result();
			$stmt->close();
		}
		else
		{
			if($this->DEBUG)
			{
				echo "MySql: prepare query failed. <br>";
				echo $mysqli->error;
				echo "<br>";
			}
		}
		return $v;
	}
	public function GetData($tbl, $query, $Sqlparameters)
	{
		$mysqli = new mysqli($this->host, $this->user, $this->password, $this->database) or 
			die("Problem connecting: ".mysqli_error());
		$mysqli->set_charset("utf8");
		if($this->DEBUG)
		{
			echo "MySql: GetData by ". $query. "<br>";
			echo "Current character set:". mysqli_character_set_name($mysqli);
			echo "<br>";
		}
		//
		$this->QueryData($mysqli, $tbl, $query, $Sqlparameters);
		
		// Closing connection
		$mysqli->close();
	}
	public function GetDataByStreaming($tbl, $QRY_Key, $params1, $QRY_Data, $params2, $nextKeyParameter)
	{
		$mysqli = new mysqli($this->host, $this->user, $this->password, $this->database) or 
			die("Problem connecting: ".mysqli_error());
		$mysqli->set_charset("utf8");
		if($this->DEBUG)
		{
			echo "MySql: GetDataByStreaming by ". $QRY_Data. "<br>";
			echo "Current character set:". mysqli_character_set_name($mysqli);
			echo "<br>";
		}
		//
		$nextKey = $this->GetSingleValue($mysqli, $QRY_Key, $params1);
		$nextKeyParameter->value = $nextKey;
		$params2[] = $nextKeyParameter;
		//
		$this->QueryData($mysqli, $tbl, $QRY_Data, $params2);
		
		// Closing connection
		$mysqli->close();
		//
		return $nextKey;
	}
	public function prepareStatement($mysqli, $query)
	{
		$stmt = $mysqli->stmt_init();
		if($mysqli->errno)
		{
			echo "MySql: stmt_init failed:". $mysqli->error. " <br>";
			return null;
		}
		if ($stmt->prepare($query)) 
		{
			return $stmt;
		}
		else
		{
			echo "MySql: prepare query failed. <br>";
			echo $mysqli->error;
			echo "<br>";
			return null;
		}
	}
	public function executeStatement($mysqli, $stmt, $Sqlparameters)
	{
		$st = "";
		$pn = count($Sqlparameters);
		if($this->DEBUG)
		{
			echo "MySql: parameter count:". $pn. "<br>";
		}
		if($pn > 0)
		{
			$pvs = array();
			$bindpV[] = &$st;
			for($i=0;$i<$pn;$i++)
			{
				if($this->DEBUG)
				{
					echo "MySql: parameter ". $i. " type:". $Sqlparameters[$i]->type. "  value:". $Sqlparameters[$i]->value. "<br>";
				}
				$st = $st.$Sqlparameters[$i]->type;
				$pvs["p".strval($i)] = $Sqlparameters[$i]->value;
				$bindpV[] = &$pvs["p".strval($i)];
			}
			call_user_func_array(array($stmt,'bind_param'),$bindpV);
		}
		$stmt->execute();
		//
		if($mysqli->errno)
		{
			if($this->DEBUG)
			{
				echo "MySql: execute failed:". $mysqli->error. " <br>";
			}
		}
		else
		{
			//
			if($this->DEBUG)
			{
				echo "MySql: finish execute.<br>";
			}
			//
			$mysqli->commit();
			//
			if($mysqli->errno)
			{
				if($this->DEBUG)
				{
					echo "MySql: commit failed:". $mysqli->error. " <br>";
				}
			}
			else
			{
				//
				if($this->DEBUG)
				{
					echo "MySql: committed.<br>";
				}
				$ret = true;
			}
		}
	}
	public function ExecuteCommand($mysqli, $query, $Sqlparameters)
	{
		$ret = false;
		$stmt = $mysqli->stmt_init();
		if($mysqli->errno)
		{
			$this->errorMessage = "MySql: stmt_init failed:". $mysqli->error;
			if($this->DEBUG)
			{
				echo "MySql: stmt_init failed:". $mysqli->error. " <br>";
			}
			return false;
		}
		if ($stmt->prepare($query)) 
		{
			$st = "";
			$pn = count($Sqlparameters);
			if($this->DEBUG)
			{
				echo "MySql: parameter count:". $pn. "<br>";
			}
			if($pn > 0)
			{
				$pvs = array();
				$bindpV[] = &$st;
				for($i=0;$i<$pn;$i++)
				{
					if($this->DEBUG)
					{
						echo "MySql: parameter ". $i. " type:". $Sqlparameters[$i]->type. "  value:". $Sqlparameters[$i]->value. "<br>";
					}
					$st = $st.$Sqlparameters[$i]->type;
					$pvs["p".strval($i)] = $Sqlparameters[$i]->value;
					$bindpV[] = &$pvs["p".strval($i)];
				}
				call_user_func_array(array($stmt,'bind_param'),$bindpV);
			}
			$stmt->execute();
			//
			if($mysqli->errno)
			{
				$this->errorMessage = "MySql: execute failed:". $mysqli->error;
				if($this->DEBUG)
				{
					echo "MySql: execute failed:". $mysqli->error. " <br>";
				}
			}
			else
			{
				//
				if($this->DEBUG)
				{
					echo "MySql: finish execute.<br>";
				}
				//
				$mysqli->commit();
				//
				if($mysqli->errno)
				{
					$this->errorMessage = "MySql: commit failed:". $mysqli->error;
					if($this->DEBUG)
					{
						echo "MySql: commit failed:". $mysqli->error. " <br>";
					}
				}
				else
				{
					//
					if($this->DEBUG)
					{
						echo "MySql: committed.<br>";
					}
					$ret = true;
				}
			}
			//
			// Free resultset
			$stmt->free_result();
			$stmt->close();
		}
		else
		{
			$this->errorMessage = "MySql: prepare query failed. ". $mysqli->error;
			if($this->DEBUG)
			{
				echo "MySql: prepare query failed. <br>";
				echo $mysqli->error;
				echo "<br>";
			}
		}
		return $ret;
	}
	public function ExecuteNonQuery($query, $Sqlparameters)
	{
		$ret = false;
		if($this->DEBUG)
		{
			echo "MySql: execute non-query:". $query. "<br>";
		}
		$mysqli = new mysqli($this->host, $this->user, $this->password, $this->database);
		if (mysqli_connect_errno()) {
			$this->errorMessage = "Connect failed: ".mysqli_connect_error();
			return $ret;
		}
		$mysqli->set_charset("utf8");
		if($this->DEBUG)
		{
			echo "Current character set:". mysqli_character_set_name($mysqli);
			echo "<br>";
		}
		//
		$ret = $this->ExecuteCommand($mysqli, $query, $Sqlparameters);
		//
		// Closing connection
		$mysqli->close();
		return $ret;
	}
	public function GetMySqli()
	{
		$mysqli = new mysqli($this->host, $this->user, $this->password, $this->database) or 
			die("Problem connecting: ".mysqli_error());
		$mysqli->set_charset("utf8");
		return $mysqli;
	}
	public function CreateNewRecord($query, $Sqlparameters, $getAutoNumber)
	{
		$ret = false;
		if($this->DEBUG)
		{
			echo "MySql: execute CreateNewRecord:". $query. "<br>";
		}
		$mysqli = new mysqli($this->host, $this->user, $this->password, $this->database) or 
			die("Problem connecting: ".mysqli_error());
		$mysqli->set_charset("utf8");
		if($this->DEBUG)
		{
			echo "Current character set:". mysqli_character_set_name($mysqli);
			echo "<br>";
		}
		//
		$ret = $this->ExecuteCommand($mysqli, $query, $Sqlparameters);
		//
		//get autonumber
		$autoNum = 0;
		if($ret && $getAutoNumber)
		{
			$stmt = $mysqli->stmt_init();
			if($this->DEBUG)
			{
				echo "MySql after CreateNewRecord: stmt_init finished. <br>";
			}
			if($mysqli->errno)
			{
				if($this->DEBUG)
				{
					echo "MySql after CreateNewRecord: stmt_init failed:". $mysqli->error. " <br>";
				}
			}
			if ($stmt->prepare('SELECT LAST_INSERT_ID();')) 
			{
				if($this->DEBUG)
				{
					echo "MySql after CreateNewRecord: prepare autonumber query finished. <br>";
				}
				$stmt->execute();
			}
			else
			{
				if($this->DEBUG)
				{
					echo "MySql after CreateNewRecord: prepare autonumber query failed. <br>";
				}
			}
			//
			if($mysqli->errno)
			{
				if($this->DEBUG)
				{
					echo "MySql after CreateNewRecord: execute failed:". $mysqli->error. " <br>";
				}
			}
			//
			if($this->DEBUG)
			{
				echo "MySql after CreateNewRecord: execute finished. <br>";
			}
			//
			$meta = $stmt->result_metadata();
			if ($column = $meta->fetch_field())
			{
				$bindVarsArray[] = &$results[$column->name];
			}
			call_user_func_array(array($stmt, 'bind_result'), $bindVarsArray);
			if($stmt->fetch())
			{
				foreach($results as $key => $value)
				{
					$autoNum = $value;
				}
				if($this->DEBUG)
				{
					echo "MySql auto number: ". $autoNum. "<br>";
				}
			}
			// Free resultset
			$stmt->free_result();
			$stmt->close();
		}
		// Closing connection
		$mysqli->close();
		if($ret && $getAutoNumber)
		{
			return $autoNum;
		}
		return $ret;
	}
	public function QueryWithPreparer($preparer, $preparerParameters, $tbl, $query, $Sqlparameters)
	{
		if($this->DEBUG)
		{
			echo "MySql: query with data preparation:". $preparer. ".<br> query:". $query. "<br>";
		}
		$mysqli = new mysqli($this->host, $this->user, $this->password, $this->database) or 
			die("Problem connecting: ".mysqli_error());
		$mysqli->set_charset("utf8");
		if($this->DEBUG)
		{
			echo "Current character set:". mysqli_character_set_name($mysqli);
			echo "<br>";
		}
		//
		$ret = $this->ExecuteCommand($mysqli, $preparer, $preparerParameters);
		if($ret)
		{
			$this->QueryData($mysqli, $tbl, $query, $Sqlparameters);
		}
		//
		// Closing connection
		$mysqli->close();
		return $ret;
	}
}

?>