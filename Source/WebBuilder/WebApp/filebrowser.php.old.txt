<?php

include 'JsonProcessPage.php';
include 'FastJSON.class.php';
include 'jsonDataBind.php';

class Page1 extends JsonProcessPage
{
	function __construct()
	{
		parent::__construct();
	}
  public function loadFiles($path, $filetypes)
	{
    $files = array();
		// '.' for current
		$di = new DirectoryIterator($_SERVER['DOCUMENT_ROOT'].$path);
		if ($this->DEBUG)
    {
         echo "start of listing files:============= <br>";
    }
		foreach ($di as $file)
		{
      $fn = $file->getFilename();
			if ($this->DEBUG)
			{
          echo "item:".$fn." <br>";
			}
			if($file->isDot()) continue;
			$f = $_SERVER['DOCUMENT_ROOT'].$path.'/'.$fn;
			if(!is_dir($f))
			{
        $b = ($filetypes == null || strlen($filetypes) == 0);
        if(!$b)
        {
          $ext = strtolower(substr($fn, strrpos($fn, '.') + 1));
          if($filetypes == '.html')
          {
            if($ext == 'html' || $ext == 'htm')
            {
              $b = true;
            }
          }
          else if($filetypes == '.image')
          {
            if($ext == 'jpg' || $ext == 'png' || $ext == 'bmp' || $ext == 'gif')
            {
              $b = true;
            }
          }
          else
          {
            $el = explode(';',$filetypes);
            $b = in_array($ext, $el);
          }
        }
        if($b)
        {
				  $files[] =  $fn;
        }
			}
		}
		if ($this->DEBUG)
    {
         echo "end of listing files===========<br>";
    }
		return $files;
  }
	public function loadFolders($path)
	{
		//$protocol = $_SERVER['HTTPS'] == '' ? 'http://' : 'https://';
		//$rfolder = $protocol . $_SERVER['HTTP_HOST'];
		$folders = array();
		// '.' for current
		$di = new DirectoryIterator($_SERVER['DOCUMENT_ROOT'].$path);
		if ($this->DEBUG)
        {
                 echo "start of listing sub-folders:============= <br>";
        }
		foreach ($di as $file)
		{
			if ($this->DEBUG)
			{
                 echo "item:".$file->getFilename()." <br>";
			}
			if($file->isDot()) continue;
			$f = $_SERVER['DOCUMENT_ROOT'].$path.'/'.$file->getFilename();
			if(is_dir($f))
			{
				$folders[] =  $file->getFilename();
			}
		}
		if ($this->DEBUG)
        {
                 echo "end of listing sub-folders===========<br>";
        }
		return $folders;
	}
	protected function OnRequestStart()
	{
		
	}
	protected function OnRequestFinish()
	{

	}
	protected function OnRequestGetData($value)
	{

	}
	protected function OnRequestPutData($value)
	{
	}
	protected function OnRequestExecution($method, $value)
	{
		if($method == 'loadFolders') 
		{
			$folders = $this->loadFolders($value);
			$this->AddDownloadValue('folders',$folders);
			$this->SetServerComponentName($this->jsonFromClient->values->serverComponentName);
		}
    else if($method == 'loadFiles') 
		{
      if ($this->DEBUG)
      {
        echo 'file types:'.$this->jsonFromClient->values->filetypes.'<br>';
      }
			$files = $this->loadFiles($value, $this->jsonFromClient->values->filetypes);
			$this->AddDownloadValue('filenames',$files);
			$this->SetServerComponentName($this->jsonFromClient->values->serverComponentName);
		}
		else
		{
			if ($this->DEBUG)
      {
           echo "Invalid method name:".$method." <br>";
      }
		}
	}

}

$w = new Page1($cr_df8cdf8845af42279a043e4289a2e826);
$w->ProcessClientRequest();

?>